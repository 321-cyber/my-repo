#include<iostream>using namespace std;class Complex {               //复数类	double real, image;public:	Complex(double r = 0, double i = 0) { real = r; image = i; }	void print();	Complex operator+(Complex&);//重载+：复数+复数	Complex operator-(Complex&);//重载-：复数-复数	Complex operator*(Complex&);//重载*：复数*复数	Complex operator/(Complex&);//重载/：复数/复数	Complex operator-();       //重载-：-复数};void Complex::print(){	if (image < 0)  cout << real << image << "i\n";	else if (image > 0)  cout << real << '+' << image << "i\n";	else  cout << real << endl;}Complex Complex::operator+(Complex& c){	return Complex(real + c.real, image + c.image);}Complex Complex::operator-(Complex& c){	return Complex(real - c.real, image - c.image);}Complex Complex::operator*(Complex& c){	Complex temp;	temp.real = real * c.real - image * c.image;	temp.image = real * c.image + image * c.real;	return temp;}Complex Complex::operator/(Complex& c){	Complex temp;	double r = c.real * c.real + c.image * c.image;	temp.real = (real * c.real + image * c.image) / r;	temp.image = (image * c.real - real * c.image) / r;	return temp;}Complex Complex::operator-(){	return Complex(-real, -image);}int main(){	Complex c1(5, 2), c2(3, 4), c3;	c3 = c1 + c2;   c3.print();	c3 = c1 + c2 + c3; c3.print();	c3 = c1 - c2;     c3.print();	c3 = c1 * c2;     c3.print();	c3 = c1 / c2;     c3.print();	c3 = -c1;     c3.print();}